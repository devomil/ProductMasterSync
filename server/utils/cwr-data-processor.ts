import { db } from "../db";
import { products, categories, productSuppliers } from "@shared/schema";
import { eq, and, isNull } from "drizzle-orm";

/**
 * Process authentic CWR category data into hierarchical structure
 */
export async function processCWRCategories(categoryName: string): Promise<number | null> {
  if (!categoryName || categoryName.trim() === '') {
    return null;
  }

  console.log('Processing CWR category:', categoryName);
  
  // CWR uses format like "Paddlesports | Safety,Marine Safety | Accessories"
  // Split by comma to get multiple category paths
  const categoryPaths = categoryName.split(',').map(path => path.trim());
  
  let finalCategoryId = null;
  
  // Process each category path
  for (const categoryPath of categoryPaths) {
    const parts = categoryPath.split('|').map(part => part.trim());
    let parentId: number | null = null;
    let currentLevel = 0;
    let fullPath = '';
    
    // Create hierarchical categories
    for (const part of parts) {
      if (!part) continue;
      
      fullPath = fullPath ? `${fullPath} | ${part}` : part;
      
      // Check if category exists
      const existingQuery = parentId 
        ? and(eq(categories.name, part), eq(categories.parentId, parentId))
        : and(eq(categories.name, part), isNull(categories.parentId));
      
      const existing = await db.select().from(categories).where(existingQuery);
      
      if (existing.length > 0) {
        parentId = existing[0].id;
      } else {
        // Create new category
        const [newCategory] = await db.insert(categories).values({
          name: part,
          code: generateCategoryCode(part),
          parentId: parentId,
          level: currentLevel,
          path: fullPath,
          attributes: {
            autoGenerated: true,
            level: currentLevel,
            fullPath: fullPath,
            source: 'cwr-sftp'
          }
        }).returning();
        
        parentId = newCategory.id;
        console.log(`âœ… Created category: ${fullPath} (ID: ${parentId})`);
      }
      
      currentLevel++;
    }
    
    // Use the last created/found category as the final one
    if (parentId) {
      finalCategoryId = parentId;
    }
  }
  
  return finalCategoryId;
}

/**
 * Process authentic CWR image URLs
 */
export function processCWRImages(record: any): string[] {
  const images: string[] = [];
  
  // CWR provides multiple image URLs
  if (record['Image (1000x1000) Url'] && record['Image (1000x1000) Url'].trim() !== '') {
    images.push(record['Image (1000x1000) Url'].trim());
  }
  
  if (record['Image (300x300) Url'] && record['Image (300x300) Url'].trim() !== '') {
    images.push(record['Image (300x300) Url'].trim());
  }
  
  // Additional images
  if (record['Image Additional (1000x1000) Urls'] && record['Image Additional (1000x1000) Urls'].trim() !== '') {
    const additionalImages = record['Image Additional (1000x1000) Urls'].split(',')
      .map((url: string) => url.trim())
      .filter((url: string) => url !== '');
    images.push(...additionalImages);
  }
  
  return images;
}

/**
 * Clean HTML descriptions from CWR data
 */
export function processCWRDescription(description: string): string {
  if (!description) return '';
  
  // Remove HTML tags but preserve basic formatting
  return description
    .replace(/<[^>]*>/g, '') // Remove HTML tags
    .replace(/&nbsp;/g, ' ') // Replace non-breaking spaces
    .replace(/&amp;/g, '&') // Replace HTML entities
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();
}

/**
 * Generate category code from name
 */
function generateCategoryCode(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9\s&]/g, '')
    .replace(/\s+/g, '-')
    .replace(/&/g, 'and')
    .substring(0, 50);
}

/**
 * Transform authentic CWR record to product format
 */
export async function transformCWRRecord(record: any, supplierId: number): Promise<any> {
  console.log('Transforming CWR record:', record['CWR Part Number']);
  
  // Process categories
  const categoryId = await processCWRCategories(record['Category Name']);
  
  // Process images
  const images = processCWRImages(record);
  
  // Clean description
  const description = processCWRDescription(record['Full Description'] || record['Title'] || '');
  
  return {
    // Required fields
    name: record['Title'] || record['Uppercase Title'] || `Product ${record['CWR Part Number']}`,
    sku: `EDC${String(Math.floor(Math.random() * 900000) + 100000)}`, // Generate EDC code
    
    // Core product info
    description: description,
    manufacturerPartNumber: record['Manufacturer Part Number'] || null,
    upc: record['UPC Code'] || null,
    categoryId: categoryId,
    brand: record['Manufacturer Name'] || null,
    
    // Pricing & Financial (for Pricing tab)
    price: parseFloat(record['List Price']) || null,
    cost: parseFloat(record['Your Cost']) || null,
    mapPrice: parseFloat(record['Map Price']) || null,
    mrpPrice: parseFloat(record['MRP Price']) || null,
    originalPrice: parseFloat(record['Original Price']) || null,
    freightClass: record['Freight Class'] || null,
    harmonizationCode: record['Harmonization Code'] || null,
    
    // Physical specifications
    weight: parseFloat(record['Shipping Weight']) || null,
    length: parseFloat(record['Box Length']) || null,
    width: parseFloat(record['Box Width']) || null,
    height: parseFloat(record['Box Height']) || null,
    cube: record['Cube'] || null,
    
    // Inventory & Logistics (for Shipping tab)
    stockStatus: record['Stock Status'] || null,
    availability: record['Availability'] || null,
    leadTime: record['Lead Time'] || null,
    dropship: record['Dropship Available'] === '1',
    packQuantity: parseInt(record['Pack Quantity']) || null,
    nonStock: record['Non-stock'] === '1',
    dropShipsDirect: record['Drop Ships Direct'] === '1',
    caseQtyNJ: parseInt(record['Case Qty NJ']) || null,
    caseQtyFL: parseInt(record['Case Qty FL']) || null,
    returnable: record['Returnable'] === '1',
    
    // Shipping & Logistics (for Shipping tab)
    hazardousMaterials: record['Hazardous Materials'] === '1',
    truckFreight: record['Truck Freight'] === '1',
    exportable: record['Exportable'] === '1',
    firstClassMail: record['First Class Mail'] === '1',
    oversized: record['Oversized'] === '1',
    freeShipping: record['Free Shipping'] === '1',
    freeShippingEndDate: record['Free Shipping End Date'] || null,
    countryOfOrigin: record['Country Of Origin'] || null,
    
    // Compliance & Regulatory (for Compliance tab)
    prop65: record['Prop 65'] === '1',
    prop65Description: record['Prop 65 Description'] || null,
    fccId: record['FCC ID'] || null,
    thirdPartyMarketplaces: record['3rd Party Marketplaces'] || null,
    googleMerchantCategory: record['Google Merchant Category'] || null,
    
    // Sales & Promotions (for Promotions tab)
    sale: record['Sale'] === '1',
    saleStartDate: record['Sale Start Date'] || null,
    saleEndDate: record['Sale End Date'] || null,
    rebate: record['Rebate'] === '1',
    rebateDescription: record['Rebate Description'] || null,
    rebateStartDate: record['Rebate Start Date'] || null,
    rebateEndDate: record['Rebate End Date'] || null,
    
    // Documentation & Resources (for Documentation tab)
    quickGuideUrl: record['Quick Guide URL'] || null,
    ownersManualUrl: record['Owners Manual URL'] || null,
    brochureUrl: record['Brochure URL'] || null,
    installationGuideUrl: record['Installation Guide URL'] || null,
    videoUrls: record['Video URLs'] || null,
    quickSpecs: record['Quick Specs'] || null,
    accessoriesBySku: record['List of Accessories by SKU'] || null,
    accessoriesByMfg: record['List of Accessories by MFG#'] || null,
    
    // Product flags
    isRemanufactured: record['Remanufactured'] === '1',
    isCloseout: record['Closeout'] === '1',
    
    // Images
    images: images.length > 0 ? images : null,
    primaryImage: images.length > 0 ? images[0] : null,
    
    // USIN for supplier identification
    usin: record['CWR Part Number'] || null,
    
    // Store additional attributes for extensibility
    attributes: {
      // Store any unmapped CWR fields here
      additionalData: record
    },
    
    status: 'active',
    createdAt: new Date(),
    updatedAt: new Date()
  };
}